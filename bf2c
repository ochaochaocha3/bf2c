#!/usr/bin/env ruby

require 'strscan'

class Bf2C
  HEADER = <<EOS
#include <stdio.h>

#define ARRAY_SIZE 32768

unsigned char a[ARRAY_SIZE];
unsigned char* ptr = a;

int main(void) {
  size_t i;

#define REPEAT(n) \\
  for (i = 0; i < (n); i++)

EOS

  FOOTER = <<EOS

  return 0;
}
EOS

  # 繰り返し回数によってポインタ操作の書き方を変える Proc を作る
  ptr_op = lambda do |op, value|
    var = value ? '*ptr' : 'ptr'

    lambda do |n|
      if n > 1
        "#{var} #{op}= #{n};"
      else
        value ? "(#{var})#{op}#{op};" : "#{var}#{op}#{op};"
      end
    end
  end

  CONVERT_TABLE = {
    next_ptr: ptr_op['+', false],
    prev_ptr: ptr_op['-', false],
    inc_value: ptr_op['+', true],
    dec_value: ptr_op['-', true],
    putchar: 'putchar(*ptr);',
    getchar: '*ptr = getchar();',
    loop_start: 'while (*ptr != 0) {',
    loop_end: '}',
    repeat: ->(n, stmt) { "REPEAT(#{n}) { #{stmt} }" }
  }

  def initialize(source)
    @tokens = []
    parse(source)
  end

  def print(io)
    return if @tokens.empty?

    io.puts(HEADER)

    indent_level = 1
    last_token = nil
    @tokens.each do |token, n|
      case token
      when :loop_start
        io.puts if last_token && last_token != :loop_start
      when :loop_end
        indent_level -= 1
      else
        io.puts if last_token == :loop_end
      end

      indent_level.times { io.print('  ') }

      case token
      when :next_ptr, :prev_ptr, :inc_value, :dec_value
        io.puts(CONVERT_TABLE[token][n])
      when :loop_start, :loop_end
        io.puts(CONVERT_TABLE[token])
      else
        io.puts(n > 1 ?
                CONVERT_TABLE[:repeat][n, CONVERT_TABLE[token]] :
                CONVERT_TABLE[token])
      end

      indent_level += 1 if token == :loop_start

      last_token = token
    end

    io.puts(FOOTER)
  end

  def parse(source)
    lines = source.lines
    scanner = nil
    push_token = ->sym { @tokens << [sym, scanner[0].length] }
    pointer = 0
    loop_level = 0

    lines.each.with_index(1).each do |line, line_num|
      scanner = StringScanner.new(line)

      until scanner.eos?
        case
        when scanner.scan(/>+/)
          push_token[:next_ptr]
        when scanner.scan(/<+/)
          push_token[:prev_ptr]
        when scanner.scan(/\++/)
          push_token[:inc_value]
        when scanner.scan(/-+/)
          push_token[:dec_value]
        when scanner.scan(/\.+/)
          push_token[:putchar]
        when scanner.scan(/,+/)
          push_token[:getchar]
        when scanner.scan(/\[/)
          loop_level += 1
          @tokens << [:loop_start, 1]
        when scanner.scan(/\]/)
          loop_level -= 1
          if loop_level < 0
            raise "excess ']' (#{line_num}:#{scanner.pos + 1})"
          end

          @tokens << [:loop_end, 1]
        else
          scanner.getch
        end
      end
    end

    raise "lacks ']'" if loop_level > 0
  end
  private :parse
end

if $PROGRAM_NAME == __FILE__
  begin
    Bf2C.new(ARGF.read).print($stdout)
  rescue => e
    $stderr.puts(e)
    abort
  end
end
